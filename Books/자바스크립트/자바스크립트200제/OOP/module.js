//모듈은 파일이나 코드의 묶음 단위로 애플리케이션 하나의 구성요소로 볼 수 있습니다, 이렇게 모듈로 정의하면 모듈 단위로 코드를 재사용할 수 있고, 하나의 애플리케이션이라는 큰 기능을 작은 기능 단위로 잘게 분리하려 관리할 수 있습니다.ㅇ ㅖ를 들어 베이스볼 게임이라는 애플리케이션을 문제 생성 모듈, 플레이어 관리 모듈, 정답 채점 모듈 등과 같이 여러 모듈로 구성할 수 있습니다.

//다음 예제를 통하여 네임스페이스 패턴을 알아보겠습니다.

var namespaceA = (function () {
  var privateVariable = "비공개 변수";
  return {
    //반환되는 객체는 namespaceA에 할당되고, 외부에서 접근이 가능하기 때문에 해당 객체의 속성과 메소드들은 공개 API가 됩니다.
    publicApi: function () {
      console.log(privateVariable + "를 접근할 수 있습니다. ");
    },
  };
})();

namespaceA.publicApi();

// 네임 스페이스란 c#언어에서 제공하는 기능으로 코드를 그룹화하고 이름 충돌을 방지하게 도와줍니다. 하지만 자바스크립트에서는 네임스페이스를 직접적으로 지원하지 않습니다. 그래서 함수를 정의함과 동시에 실행하는 즉각 호출 패턴을 통하여 네임스페이스를 유사하게 구현할 수 있습니다. 이렇게 하는 이유는 기본적으로 변수와 함수를 선언하게 되면 전역으로 정의되어 다른 라이브러리나 타인의 코드에서 정의된 이름들과 충돌이 날 수 있기 때문입니다.

///--------------

//ES6 의 모듈은 자바스크립트 코드를 담고 있는 하나의 파일입니다. 즉 하나의 파일이 하나의 모듈이라 볼 수 있습니다. ES6의 모듈은 엄격한 몯의 코드이고 import와 export키워드를 사용합니다. export키워드를 이용하여 모듈 내의 특정 코드를 외부에서 사용할 수 있습니다. 그리고 import키워드를 이용해서 export한 코드들을 가지고 올 수 있습니다. 간단히 모듈을 정의하고 코드를 외부로 내보내고 가지고 오는 예제를 살펴보겠습니다.

//이 코드가 hello.js에 있다고 가정한다.
export function hello(name) {
  console.log(`hello ${name}`);
}

//이 코드가 app.js에 있다고 가정한다.
import { hello } from "./hello.js";

//두 모듈은 단순한 자바스크립트 파일입니다. hello.js에서는 hello 함수를 정의하고 이 함수를 export 키워드를 이용하여 외부에서 가져올 수 있게 내보냈습니다. app.js에서는 hello.js의 hello함수를 Import키워드를 이용하여 가지고옵니다. 이렇게 가져온 함수는 app.js 모듈 내에서 자유롭게 사용할 수 있습니다.

//이렇게 하나의 모듈이 다른 모듈에서 내보넨 코드를 가져오면 두 모듈은 서로 의존하게 되어 의존 관계가 형성되고 여러 모듈들은 의존 관계를 맺어 의존 관계 그래프가 형성되게 됩니다. 그리고 의존 관계 그래프에서는 최상의 루트가 필요한데, 이 루트 모듈이 애플리케이션의 시작점이 됩니다. 자바나 c언어에서의 메인 메소드와 같다고 생각하면 됩니다. 위 예제의 코드에는 app.js가 루트 모듈이라고 볼 수 있습니다.

//ES6의 모듈로 정의된 파일들은 실행하는 방법에 따라 두 가지로 분류할 수 있습니다.

//런타임 로딩 : 런타임 로딩은 의존 관계가 형성된 모듈들을 애플리케이션이 구동 시점에 비동기 HTTP요청으로 불러오고 실행됩니다. 이때 모듈 로더가 필요한데, system.js나 require.js를 이용할 수 있습니다.

//번들링 : 번들링은 의존 관계가 형성된 모듈들을 하나의 파일로 묶어 줍니다. 그리고 애플리케이션이 구동할 때 묶여진 이 파일을 로드합니다. 번들링은 개발 시점에 이루어지게 되고 브라우저에서 이루어지지 않고 대체로 node.js환경에서 이루어지게 됩니다. 대표적인 모듈 번들러로는 웹팩이 있습니다.

//html 파일에 아래와 같이 작성합니다.
//<script type = "module" src = "app.js"></script>
//위 코드를 크롬 콘솔에서 확인하면 다음과 같습니다.
// hello es6 module
